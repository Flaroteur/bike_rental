import io
from logging.handlers import RotatingFileHandler
import os
import logging
import tempfile
import pandas as pd
from datetime import datetime, timedelta

from telegram import (
    ReplyKeyboardRemove,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from config import (
    TELEGRAM_CONFIG,
    LOGGING_CONFIG,
    PLOT_CONFIG
)
from utils.db import (
    get_available_bikes,
    get_user_rentals,
    start_rental,
    close_rental,
    get_payments_by_user,
    add_review,
    get_average_rating,
    check_user_role,
    get_bike_info,
    cancel_rental,
    create_user_if_not_exists,
    user_exists,
    station_exists,
    add_bike,
    get_station_id,
    get_all_stations,
    get_bike_type_id,
    get_bike_types
)
from utils.plots import (
    generate_rentals_plot,
    generate_income_plot,
    generate_rating_distribution
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=LOGGING_CONFIG["format"],
    level=LOGGING_CONFIG["level"]
)

file_handler = RotatingFileHandler(
    'app.log', 
    encoding='utf-8', 
    maxBytes=5*1024*1024,  # 5 MB
    backupCount=3
)

logger = logging.getLogger(__name__)
logger.addHandler(file_handler)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler

(
    SELECT_BIKE,
    CONFIRM_RENTAL,
    RENTAL_IN_PROGRESS,
    END_STATION_INPUT,
    REVIEW_RATING,
    REVIEW_COMMENT
) = range(6)

(ADD_BIKE_TYPE, ADD_BIKE_STATION, ADD_BIKE_CONFIRM) = range(3)

class BikeRentalBot:
    def __init__(self):
        self.application = ApplicationBuilder().token(TELEGRAM_CONFIG["token"]).build()
        self.user_states = {}
        self.user_rentals = {}  #############
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        
        self.application.add_handler(self._rental_conversation_handler()) ####################################
        self.application.add_handler(self._ratings_conversation_handler())
        
        self.application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥$"), self.start_add_bike)],
        states={
            ADD_BIKE_TYPE: [MessageHandler(filters.TEXT, self.process_bike_type)],
            ADD_BIKE_STATION: [MessageHandler(filters.TEXT, self.process_bike_station)],
            ADD_BIKE_CONFIRM: [MessageHandler(filters.Regex(r"^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$"), self.confirm_add_bike)]
        },
        fallbacks=[CommandHandler("cancel", lambda u,c: self.cancel_conversation(u,c, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"))]
        ))
            
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        
        # self.application.add_handler(MessageHandler(filters.TEXT, self.handle_message))
        
        # self.application.add_handler(MessageHandler(
        #     filters.TEXT & ~filters.COMMAND, 
        #     self.handle_bike_id_input
        # ))
        

        
        
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_message
        ))        
        
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_bike_id_input
        ))

        # self.application.add_handler(ConversationHandler(
        #     entry_points=[CommandHandler("review", self.start_review)],
        #     states={
        #         RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_rating)],
        #         COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_comment)]
        #     },
        #     fallbacks=[CommandHandler("cancel", self.cancel_review)],
        #     map_to_parent={
        #         ConversationHandler.END: None
        #     }
        # ))
        
        
        # self.application.add_handler(ConversationHandler(
        #     entry_points=[MessageHandler(filters.Regex("üö≤ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥"), self.start_rental)],
        #     states={
        #         SELECT_BIKE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_bike)],
        #         CONFIRM_RENTAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_rental)],
        #         RENTAL_IN_PROGRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.rental_actions)],
        #         REVIEW_RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_review_rating)],
        #         REVIEW_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_review_comment)]
        #     },
        #     fallbacks=[CommandHandler("cancel", self.cancel_rental)]
        # ))
        self.application.add_error_handler(self.error_handler)
        

    def _main_menu(self, user_id: int = None):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏"""
        buttons = [
            [KeyboardButton("üö≤ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")],
            [KeyboardButton("üìñ –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id and self._is_admin(user_id):
            buttons.insert(1, [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")])
        
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return check_user_role(user_id, "admin")

    def _rental_menu(self):
        """–ú–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã"""
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],
                [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É")]
            ],
            resize_keyboard=True
        )
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        user_data = {
            "id": user.id,
            "full_name": user.full_name,
            "username": user.username
        }
        
        create_user_if_not_exists(user_data)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!",
            reply_markup=self._main_menu(user.id)
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üö≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ\n"
            "üìñ –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã - –∏—Å—Ç–æ—Ä–∏—è –∞—Ä–µ–Ω–¥\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        await update.message.reply_text(help_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        if context.user_data.get('in_conversation'):
            return
        
        text = update.message.text
        handlers = {
            "üö≤ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥": self.start_rental,
            "üìñ –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã": self.show_user_rentals,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": self.show_stats_menu,
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥": self.start_add_bike,
            "üîô –ù–∞–∑–∞–¥": self.start,
            "‚ùì –ü–æ–º–æ—â—å": self.help,            
            
            "üìà –ê—Ä–µ–Ω–¥—ã": self.show_rentals_stats,
            "üí∞ –î–æ—Ö–æ–¥—ã": self.show_income_stats,
            "‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏": self.show_ratings_stats,                        
            
            "üîô –ù–∞–∑–∞–¥": self.start,
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É": self.cancel_rental
        }
        
        if text in handlers:
            await handlers[text](update, context)
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                reply_markup=self._main_menu()
            )

    async def show_stats_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        reply_markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üìà –ê—Ä–µ–Ω–¥—ã"), KeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã")],
                [KeyboardButton("‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup
        )

    async def show_available_bikes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã"""
        try:
            bikes = get_available_bikes()
            if not bikes:
                await update.message.reply_text("üòû –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤")
                return

            response = ["üö¥ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã:\n"]
            for bike in bikes:
                response.append(
                    f"ID: {bike['bike_id']}\n"
                    f"–¢–∏–ø: {bike['type']}\n"
                    f"–°—Ç–∞–Ω—Ü–∏—è: {bike['station']}\n"
                    f"–¶–µ–Ω–∞: {bike['price_per_hour']} —Ä—É–±/—á–∞—Å\n"
                )

            await update.message.reply_text("\n".join(response))
        except Exception as e:
            logger.error(f"Available bikes error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def start_add_bike(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤
        bike_types = get_bike_types()  
        if not bike_types:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤")
            return ConversationHandler.END
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏
        keyboard = [[t['name']] for t in bike_types]
        keyboard.append(["üîô –û—Ç–º–µ–Ω–∞"])
        
        await update.message.reply_text(
            "üö¥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ADD_BIKE_TYPE

    async def process_bike_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        selected_type = update.message.text
        type_id = get_bike_type_id(selected_type)  
        
        if not type_id:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞")
            return ADD_BIKE_TYPE
        
        context.user_data['new_bike'] = {'type_id': type_id}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π
        stations = get_all_stations()  
        keyboard = [[s['name']] for s in stations]
        keyboard.append(["üîô –û—Ç–º–µ–Ω–∞"])
        
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ADD_BIKE_STATION

    async def process_bike_station(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        station_name = update.message.text
        station_id = get_station_id(station_name)  
        
        if not station_id:
            await update.message.reply_text("‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ADD_BIKE_STATION
        
        context.user_data['new_bike']['station_id'] = station_id
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–°–æ–∑–¥–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥?\n"
            f"–¢–∏–ø: {update.message.text}\n"
            f"–°—Ç–∞–Ω—Ü–∏—è: {station_name}",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )
        return ADD_BIKE_CONFIRM

    async def confirm_add_bike(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        if update.message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            bike_data = context.user_data['new_bike']
            if add_bike(**bike_data):  
                await update.message.reply_text("‚úÖ –í–µ–ª–æ—Å–∏–ø–µ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=self._main_menu())
            else:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", reply_markup=self._main_menu())
        else:
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=self._main_menu())
        
        context.user_data.clear()
        return ConversationHandler.END

    async def start_rental(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—Ä–µ–Ω–¥—ã"""
        try:
            bikes = get_available_bikes()
            if not bikes:
                await update.message.reply_text("üòû –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤")
                return ConversationHandler.END
                
            bike_list = "\n".join(
                f"{b['bike_id']} - {b['type']} ({b['station']}), —Ü–µ–Ω–∞: {b['price_per_hour']} ‚ÇΩ/—á–∞—Å" 
                for b in bikes
            )
            
            await update.message.reply_text(
                f"üö≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã:\n{bike_list}\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
                reply_markup=ReplyKeyboardRemove()
            )
            return SELECT_BIKE
            
        except Exception as e:
            logger.error(f"Start rental error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return ConversationHandler.END

    async def select_bike(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
        try:
            bike_id = int(update.message.text)
            bike = get_bike_info(bike_id) 
            
            if not bike or bike['status'] != 'available':
                await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return ConversationHandler.END
                
            context.user_data['rental'] = {
                'bike_id': bike_id,
                'start_station': bike['station_id']
            }
            
            reply_markup = ReplyKeyboardMarkup(
                [[KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥ {bike_id}\n"
                f"–¢–∏–ø: {bike['type']}\n"
                f"–°—Ç–∞–Ω—Ü–∏—è: {bike['station']}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞—Ä–µ–Ω–¥—É:",
                reply_markup=reply_markup
            )
            return CONFIRM_RENTAL
            
        except KeyError as e:
            logger.error(f"Key error in select_bike: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
            return SELECT_BIKE

        
    async def confirm_rental(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã"""
        if update.message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            try:
                user_id = update.effective_user.id
                rental_data = context.user_data['rental']
                
                if not user_exists(user_id):
                    create_user_if_not_exists({
                        "id": user_id,
                        "full_name": update.effective_user.full_name,
                        "username": update.effective_user.username
                    })
                
                rental_id = start_rental(
                    user_id=user_id,
                    bike_id=rental_data['bike_id'],
                    station_id=rental_data['start_station']
                )
                
                self.user_rentals[update.message.chat_id] = rental_id
                await update.message.reply_text("üö¥ –ê—Ä–µ–Ω–¥–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=self._rental_menu())
                return RENTAL_IN_PROGRESS
                
            except Exception as e:
                logger.error(f"Confirm rental error: {e}", exc_info=True)
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∞—Ä–µ–Ω–¥—ã")
                return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return ConversationHandler.END

    def _rental_conversation_handler(self):
        return ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üö≤ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥$"), self.start_rental)],
            states={
                SELECT_BIKE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_bike)
                ],
                CONFIRM_RENTAL: [
                    MessageHandler(filters.Regex("^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$"), self.confirm_rental)
                ],
                RENTAL_IN_PROGRESS: [
                    MessageHandler(filters.Regex("^(üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É)$"), self.rental_actions)
                ],
                END_STATION_INPUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_end_station)
                ],
                REVIEW_RATING: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_review_rating)
                ],
                REVIEW_COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_review_comment)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_rental)],
            map_to_parent={ConversationHandler.END: None}
        )

    def _ratings_conversation_handler(self):
        return ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex("^‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏$"), self.show_ratings_stats)
            ],
            states={
                REVIEW_RATING: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_bike_id_input)
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel_ratings)
            ],
            map_to_parent={ConversationHandler.END: None}
        )
    async def rental_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã"""
        if update.message.text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞–Ω—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            return END_STATION_INPUT
        else:
            await update.message.reply_text(
                "üö¥ –ê—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=self._rental_menu()
            )
            return RENTAL_IN_PROGRESS
        
    async def process_end_station(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å—Ç–∞–Ω—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        try:
            end_station_id = int(update.message.text)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏
            if not station_exists(end_station_id):
                await update.message.reply_text("‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return END_STATION_INPUT
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º station_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['end_station'] = end_station_id
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
            await update.message.reply_text(
                "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∞—Ä–µ–Ω–¥—É (1-5):",
                reply_markup=ReplyKeyboardMarkup([[str(i) for i in range(1, 6)]], resize_keyboard=True)
            )
            return REVIEW_RATING
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å—Ç–∞–Ω—Ü–∏–∏")
            return END_STATION_INPUT

    async def show_user_rentals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            rentals = get_user_rentals(user_id)
            
            if not rentals:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥")
                return
            
            df = pd.DataFrame(rentals)
            
            datetime_columns = ['start_time', 'end_time']
            for col in datetime_columns:
                if col in df.columns:
                    df[col] = pd.to_datetime(df[col]).dt.strftime('%Y-%m-%d %H:%M')
            
           
            columns_order = [
                'rental_id', 
                'start_time', 
                'end_time', 
                'start_station', 
                'end_station', 
                'bike_id', 
                'bike_type'
            ]
            df = df[columns_order]

            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            csv_buffer = io.StringIO()
            df.to_csv(csv_buffer, index=False)
            csv_buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await update.message.reply_document(
                document=InputFile(
                    io.BytesIO(csv_buffer.getvalue().encode()),
                    filename="my_rentals.csv"
                ),
                caption="üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∞—Ä–µ–Ω–¥"
            )

        except Exception as e:
            logger.error(f"User rentals CSV error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

    async def show_rentals_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì—Ä–∞—Ñ–∏–∫ –∞—Ä–µ–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"""
        try:
            plot_path = generate_rentals_plot()
            if plot_path and os.path.exists(plot_path):
                await update.message.reply_photo(
                    photo=open(plot_path, 'rb'),
                    caption="üìà –ê—Ä–µ–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
                )
            else:
                await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—Ä–µ–Ω–¥–∞—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥")
        except Exception as e:
            logger.error(f"Rentals stats error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    async def show_income_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"""
        try:
            plot_path = generate_income_plot()
            if plot_path and os.path.exists(plot_path):
                await update.message.reply_photo(
                    photo=open(plot_path, 'rb'),
                    caption="üí∞ –î–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
                )
            else:
                await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥")
        except Exception as e:
            logger.error(f"Income stats error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    async def show_ratings_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        try:
            await update.message.reply_text(
                "üö¥ –í–≤–µ–¥–∏—Ç–µ ID –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            )
            return REVIEW_RATING
        except Exception as e:
            logger.error(f"Ratings start error: {e}")
            return ConversationHandler.END
        
        
    async def handle_bike_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID"""
        try:
            bike_id = int(update.message.text)
            plot_path = generate_rating_distribution(bike_id)
            
            if plot_path:
                await update.message.reply_photo(
                    photo=open(plot_path, 'rb'),
                    caption=f"‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ {bike_id}",
                    reply_markup=self._main_menu()
                )
            else:
                await update.message.reply_text(
                    "üö¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞",
                    reply_markup=self._main_menu()
                )
            return ConversationHandler.END

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return REVIEW_RATING
        except Exception as e:
            logger.error(f"Ratings error: {e}")
            return ConversationHandler.END


    async def cancel_ratings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=self._main_menu())
        return ConversationHandler.END
    # async def start_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    #     try:
    #         await update.message.reply_text(
    #             "üö¥ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ\n"
    #             "–í–≤–µ–¥–∏—Ç–µ ID –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:",
    #             reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    #         )
    #         return RATING
    #     except Exception as e:
    #         logger.error(f"Start review error: {e}")
    #         return ConversationHandler.END

    # async def get_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
    #     try:
    #         bike_id = int(update.message.text)
    #         context.user_data["bike_id"] = bike_id
    #         await update.message.reply_text(
    #             "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –æ—Ç 1 –¥–æ 5:",
    #             reply_markup=ReplyKeyboardMarkup(
    #                 [[str(i) for i in range(1, 6)] + [KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
    #                 resize_keyboard=True
    #             )
    #         )
    #         return COMMENT
    #     except ValueError:
    #         await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    #         return RATING

    # async def get_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    #     try:
    #         rating = int(update.message.text)
    #         if 1 <= rating <= 5:
    #             bike_id = context.user_data["bike_id"]
    #             user_id = update.effective_user.id
                
    #             add_review(user_id, bike_id, rating)
    #             avg_rating = get_average_rating(bike_id)
                
    #             await update.message.reply_text(
    #                 f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞: {avg_rating}/5",
    #                 reply_markup=self._main_menu()
    #             )
    #             return ConversationHandler.END
    #         else:
    #             await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
    #             return COMMENT
    #     except ValueError:
    #         await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏")
    #         return COMMENT

    async def process_review_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∞—Ä–µ–Ω–¥—ã"""
        try:
            rating = int(update.message.text)
            if not (1 <= rating <= 5):
                raise ValueError
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['rating'] = rating
            
            await update.message.reply_text(
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True)
            )
            return REVIEW_COMMENT
            
        except ValueError:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return REVIEW_RATING

    # async def process_review_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
    #     try:
    #         rating = None
    #         if update.message.text.isdigit():
    #             rating = int(update.message.text)
    #             if not (1 <= rating <= 5):
    #                 raise ValueError
            
    #         # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä–µ–Ω–¥—É
    #         rental_id = self.user_rentals.get(update.message.chat_id)
    #         close_rental(
    #             rental_id=rental_id,
    #             end_station_id=context.user_data['end_station']
    #         )
            
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    #         if rating:
    #             add_review(
    #                 user_id=update.effective_user.id,
    #                 bike_id=context.user_data['rental']['bike_id'],
    #                 rating=rating
    #             )
            
    #         await update.message.reply_text(
    #             "‚úÖ –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.",
    #             reply_markup=self._main_menu()
    #         )
    #         return ConversationHandler.END
            
    #     except ValueError:
    #         await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏")
    #         return REVIEW_COMMENT
    
    
    async def process_review_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            end_station_id = context.user_data.get('end_station')
            rental_id = self.user_rentals.get(update.message.chat_id)
            rating = context.user_data.get('rating')
            
            if not end_station_id or not rental_id:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä–µ–Ω–¥—É
            if not close_rental(rental_id, end_station_id):
                raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–µ–Ω–¥—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞
            if rating:
                add_review(
                    user_id=update.effective_user.id,
                    bike_id=context.user_data['rental']['bike_id'],
                    rating=rating,
                    comment=update.message.text if update.message.text != "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
                )
                await update.message.reply_text("‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=self._main_menu())
            else:
                await update.message.reply_text("‚úÖ –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=self._main_menu())
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            del self.user_rentals[update.message.chat_id]
            context.user_data.clear()
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            return ConversationHandler.END

    async def cancel_rental(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã"""
        if update.message.chat_id in self.user_rentals:
            cancel_rental(self.user_rentals[update.message.chat_id])  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ utils.db
            del self.user_rentals[update.message.chat_id]
            
        await update.message.reply_text(
            "‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=self._main_menu()
        )
        return ConversationHandler.END

    async def cancel_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        await update.message.reply_text(
            "‚ùå –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞",
            reply_markup=self._main_menu()
        )
        return ConversationHandler.END
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling update:", exc_info=context.error)
        
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã."
        )
        
        if update.message:
            await update.message.reply_text(error_text)
        
        for admin_id in TELEGRAM_CONFIG["admin_ids"]:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{context.error}"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()

if __name__ == "__main__":
    bot = BikeRentalBot()
    bot.run()